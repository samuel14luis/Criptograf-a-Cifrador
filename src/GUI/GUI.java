/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Claves.ClaveString;
import Clases.registroTO;
import Interfaces.ClaveInterfaz;
import Libreria.JCTextField;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jhordy Principe
 */
public class GUI extends javax.swing.JFrame {

    String nombrePrograma = "Cifrador Polybios";
    String sep = File.separator;
    String dir_regFavoritos = System.getProperty("user.home") + sep + "Documents" + sep + nombrePrograma + sep + "bin" + sep + "data" + sep + "regfav_dataloader.dl";
    String dir_claves = System.getProperty("user.home") + sep + "Documents" + sep + nombrePrograma + sep + "bin" + sep + "data" + sep + "cskeys_dataloader.dl";
    
    boolean isEmpty = true;
    
    public static ClaveInterfaz _clave;

    DefaultComboBoxModel modeloCBox;
    DefaultTableModel modeloTabla;
    ArrayList<ClaveInterfaz> claves = new ArrayList<>();
    boolean cifrar;
    boolean _tablaAbierta, _nuevo;
    ArrayList<registroTO> _regfavoritos;

    static File ultimaRutaAbierta = (new JFileChooser().getCurrentDirectory());

    public GUI() {
        initComponents();
        jPanel3.setBackground(Auxiliar.color);
        jSeparator1.setForeground(Auxiliar.color);
        crearCarpetaFavoritos();

        _tablaAbierta = false;
        _nuevo = false;
        abrirTabla(_tablaAbierta);
        setLocationRelativeTo(null);
        modeloCBox = (DefaultComboBoxModel) jcbxClave.getModel();
        modeloTabla = (DefaultTableModel) jtblTabla.getModel();
        _regfavoritos = cargarListaRegistros();
        cargarClaves();
        cifrar = true;
        mostrarPrograma();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jcbxClave = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtxtResultado = new javax.swing.JTextArea();
        jbtnCopiar = new javax.swing.JButton();
        jbtnLimpiar = new javax.swing.JButton();
        jbtnMostrarTabla = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jtxtSeparador = new javax.swing.JTextField();
        jbtnCifrarDecifrar = new javax.swing.JButton();
        jbtnAcercaDe = new javax.swing.JButton();
        jbtnVerLista = new javax.swing.JButton();
        jlblFavoritos = new javax.swing.JLabel();
        jlblExportarTodasCskey = new javax.swing.JLabel();
        jlblCargarCskey = new javax.swing.JLabel();
        jlblExportarUnaCskey = new javax.swing.JLabel();
        jlblCifrar = new javax.swing.JLabel();
        jlblAdministrarClaves = new javax.swing.JLabel();
        jlblResetClaves = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jtxtClaro = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtblTabla = new javax.swing.JTable();
        jlblNombreClaveMatriz = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setIconImage(getIconImage());
        setResizable(false);

        jPanel3.setBackground(new java.awt.Color(0, 6, 0));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Cifrador Polybios"));

        jLabel1.setText("Seleccionar Clave:");

        jcbxClave.setBorder(null);
        jcbxClave.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbxClaveItemStateChanged(evt);
            }
        });
        jcbxClave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jcbxClaveMouseClicked(evt);
            }
        });
        jcbxClave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbxClaveActionPerformed(evt);
            }
        });
        jcbxClave.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jcbxClavePropertyChange(evt);
            }
        });

        jLabel2.setText("Ingresar Texto en Claro:");

        jtxtResultado.setEditable(false);
        jtxtResultado.setColumns(20);
        jtxtResultado.setRows(5);
        jScrollPane1.setViewportView(jtxtResultado);

        jbtnCopiar.setText("Copiar");
        jbtnCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCopiarActionPerformed(evt);
            }
        });

        jbtnLimpiar.setText("Limpiar");
        jbtnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnLimpiarActionPerformed(evt);
            }
        });

        jbtnMostrarTabla.setText("Mostrar Tabla");
        jbtnMostrarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnMostrarTablaActionPerformed(evt);
            }
        });

        jLabel3.setText("Separador:");

        jtxtSeparador.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtSeparadorKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtxtSeparadorKeyReleased(evt);
            }
        });

        jbtnCifrarDecifrar.setText("DESCIFRAR");
        jbtnCifrarDecifrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCifrarDecifrarActionPerformed(evt);
            }
        });
        jbtnCifrarDecifrar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbtnCifrarDecifrarKeyPressed(evt);
            }
        });

        jbtnAcercaDe.setText("Acerca de");
        jbtnAcercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAcercaDeActionPerformed(evt);
            }
        });

        jbtnVerLista.setText("Ver Favoritos");
        jbtnVerLista.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbtnVerListaMouseClicked(evt);
            }
        });
        jbtnVerLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnVerListaActionPerformed(evt);
            }
        });
        jbtnVerLista.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbtnVerListaKeyPressed(evt);
            }
        });

        jlblFavoritos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblFavoritos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/me_gusta/icons8-Me gusta-25.png"))); // NOI18N
        jlblFavoritos.setToolTipText("Agregar esto a mi lista");
        jlblFavoritos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jlblFavoritosMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jlblFavoritosMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jlblFavoritosMouseReleased(evt);
            }
        });

        jlblExportarTodasCskey.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblExportarTodasCskey.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icons8-Guardar todo-25.png"))); // NOI18N
        jlblExportarTodasCskey.setToolTipText("Exportar todas las clave");
        jlblExportarTodasCskey.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlblExportarTodasCskeyMouseClicked(evt);
            }
        });

        jlblCargarCskey.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblCargarCskey.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icons8-Agregar archivo-25.png"))); // NOI18N
        jlblCargarCskey.setToolTipText("Importar esta clave");
        jlblCargarCskey.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlblCargarCskeyMouseClicked(evt);
            }
        });

        jlblExportarUnaCskey.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblExportarUnaCskey.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icons8-Guardar-25.png"))); // NOI18N
        jlblExportarUnaCskey.setToolTipText("Exportar esta clave");
        jlblExportarUnaCskey.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlblExportarUnaCskeyMouseClicked(evt);
            }
        });

        jlblCifrar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblCifrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/llave/icons8-Llave-25-2.png"))); // NOI18N
        jlblCifrar.setToolTipText("aplicar cifrado o descifrado al texto en claro.");
        jlblCifrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlblCifrarMouseClicked(evt);
            }
        });

        jlblAdministrarClaves.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblAdministrarClaves.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icons8-Configuración de datos-25.png"))); // NOI18N
        jlblAdministrarClaves.setToolTipText("Administrar Claves");
        jlblAdministrarClaves.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlblAdministrarClavesMouseClicked(evt);
            }
        });

        jlblResetClaves.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblResetClaves.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icons8-Cita recurrente-25.png"))); // NOI18N
        jlblResetClaves.setToolTipText("Reset Claves");
        jlblResetClaves.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlblResetClavesMouseClicked(evt);
            }
        });

        jLabel4.setText("Resultado:");

        jSeparator1.setForeground(new java.awt.Color(0, 102, 255));

        jtxtClaro.setForeground(new java.awt.Color(102, 102, 102));
        jtxtClaro.setBorder(null);
        jtxtClaro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtxtClaroKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jbtnCopiar, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbtnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jbtnMostrarTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jbtnAcercaDe, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jbtnVerLista, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbtnCifrarDecifrar, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(128, 128, 128)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtxtSeparador, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcbxClave, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jlblResetClaves)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jlblAdministrarClaves)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jlblCargarCskey)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jlblExportarUnaCskey)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jlblExportarTodasCskey, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jlblFavoritos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jtxtClaro, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                                    .addComponent(jSeparator1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jlblCifrar)))
                        .addGap(10, 10, 10))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jlblAdministrarClaves)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlblExportarTodasCskey, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlblResetClaves)
                                    .addComponent(jlblCargarCskey)
                                    .addComponent(jlblExportarUnaCskey)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jcbxClave, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtxtSeparador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnCifrarDecifrar)
                    .addComponent(jbtnVerLista))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jlblFavoritos)
                            .addComponent(jlblCifrar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jtxtClaro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnCopiar)
                    .addComponent(jbtnLimpiar)
                    .addComponent(jbtnMostrarTabla)
                    .addComponent(jbtnAcercaDe))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Matriz"));

        jtblTabla.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jtblTabla.setForeground(new java.awt.Color(51, 51, 60));
        jtblTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", "A1", "B1", "C1", "D1"},
                {"A2", "a", "b", "c", "d"},
                {"B2", "e", "f", "g", "h"},
                {"C2", "i", "j", "k", "l"},
                {"D2", "m", "n", "ñ", "o"}
            },
            new String [] {
                "", "", "", "", ""
            }
        ));
        jtblTabla.setColumnSelectionAllowed(true);
        jtblTabla.setGridColor(new java.awt.Color(153, 153, 153));
        jtblTabla.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jtblTabla);

        jlblNombreClaveMatriz.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jlblNombreClaveMatriz.setForeground(new java.awt.Color(153, 153, 153));
        jlblNombreClaveMatriz.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblNombreClaveMatriz.setText("Convertir número decimal a hexadecimal");

        jButton1.setText("cerrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jlblNombreClaveMatriz, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jlblNombreClaveMatriz)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(3, 3, 3))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcbxClaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbxClaveActionPerformed
        /*actualiza la tabla que muestra la estructura de la clave utilizada
        if (_tablaAbierta) {
            llenarTabla();
        }*/
        if (cifrar) {
            mostrarResultado();
        }
    }//GEN-LAST:event_jcbxClaveActionPerformed

    private void jcbxClaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcbxClaveMouseClicked

    }//GEN-LAST:event_jcbxClaveMouseClicked

    private void jbtnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnLimpiarActionPerformed
        limpiar();
        jtxtClaro.grabFocus();
    }//GEN-LAST:event_jbtnLimpiarActionPerformed

    private void jbtnCopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCopiarActionPerformed
        copiar(jtxtResultado.getText(), "Se ha copiado el resultado al portapapeles");
        jtxtClaro.grabFocus();
    }//GEN-LAST:event_jbtnCopiarActionPerformed

    private void jbtnMostrarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnMostrarTablaActionPerformed
        //ahora depende de la clave
        actualizarPublicClave();
        ClaveInterfaz x = _clave;
        x.mostrarEstructura(this);
    }//GEN-LAST:event_jbtnMostrarTablaActionPerformed

    private void jtxtSeparadorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtSeparadorKeyPressed
        mostrarResultado();
    }//GEN-LAST:event_jtxtSeparadorKeyPressed

    private void jtxtSeparadorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtSeparadorKeyReleased
        mostrarResultado();
    }//GEN-LAST:event_jtxtSeparadorKeyReleased

    private void jbtnCifrarDecifrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCifrarDecifrarActionPerformed
        botonCifrar_Descifrar();
    }//GEN-LAST:event_jbtnCifrarDecifrarActionPerformed

    private void jcbxClaveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbxClaveItemStateChanged

    }//GEN-LAST:event_jcbxClaveItemStateChanged

    private void jcbxClavePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jcbxClavePropertyChange

    }//GEN-LAST:event_jcbxClavePropertyChange

    private void jbtnCifrarDecifrarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbtnCifrarDecifrarKeyPressed

    }//GEN-LAST:event_jbtnCifrarDecifrarKeyPressed

    private void jbtnAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAcercaDeActionPerformed
        AcercaDe x = new AcercaDe();
        x.setVisible(true);
    }//GEN-LAST:event_jbtnAcercaDeActionPerformed

    private void jbtnVerListaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbtnVerListaKeyPressed
        Favoritos x = new Favoritos(this);
    }//GEN-LAST:event_jbtnVerListaKeyPressed

    private void jbtnVerListaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbtnVerListaMouseClicked

    }//GEN-LAST:event_jbtnVerListaMouseClicked

    private void jbtnVerListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnVerListaActionPerformed
        Favoritos listaRegistros = new Favoritos(this);
    }//GEN-LAST:event_jbtnVerListaActionPerformed

    private void jlblExportarTodasCskeyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlblExportarTodasCskeyMouseClicked
        String arch = "mis_claves.cskey";
        String ruta = getRutaGuardar(new FileNameExtensionFilter("Archivos cskey", "cskey"), arch);
        if (!ruta.equals(arch)) {
            guardarObjeto(ruta, claves, "Claves guardadas!", 0);//el 0 no significa nada en especial
        }
    }//GEN-LAST:event_jlblExportarTodasCskeyMouseClicked

    private void jlblFavoritosMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlblFavoritosMouseEntered
        jlblFavoritos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/me_gusta/icons8-Me gusta Filled-25.png")));
    }//GEN-LAST:event_jlblFavoritosMouseEntered

    private void jlblFavoritosMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlblFavoritosMouseExited
        jlblFavoritos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/me_gusta/icons8-Me gusta-25.png")));
    }//GEN-LAST:event_jlblFavoritosMouseExited

    private void jlblCargarCskeyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlblCargarCskeyMouseClicked
        String arch = "mi_clave.cskey";
        String ruta = getRutaAbrir(new FileNameExtensionFilter("Archivos cskey", "cskey"), "Cargar", arch);
        if (!ruta.equals(arch)) {
            cargarClaves((ArrayList<ClaveInterfaz>) abrirObjeto(ruta, true));
        }
    }//GEN-LAST:event_jlblCargarCskeyMouseClicked

    private void jlblExportarUnaCskeyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlblExportarUnaCskeyMouseClicked
        ArrayList<ClaveInterfaz> clave = new ArrayList<ClaveInterfaz>();
        clave.add((ClaveInterfaz) jcbxClave.getSelectedItem());
        String arch = clave.get(0).getNombre() + ".cskey";
        String ruta = getRutaGuardar(new FileNameExtensionFilter("Archivos cskey", "cskey"), arch);
        if (!ruta.equals(arch)) {
            guardarObjeto(ruta, clave, "Clave guardada!");
        }
    }//GEN-LAST:event_jlblExportarUnaCskeyMouseClicked

    private void jlblCifrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlblCifrarMouseClicked
        //ahora depende de la clave!
        mostrarResultado();
    }//GEN-LAST:event_jlblCifrarMouseClicked

    private void jlblAdministrarClavesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlblAdministrarClavesMouseClicked
        AdministrarClaves x = new AdministrarClaves(this);
    }//GEN-LAST:event_jlblAdministrarClavesMouseClicked

    private void jlblResetClavesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlblResetClavesMouseClicked
        resetearClaves();
    }//GEN-LAST:event_jlblResetClavesMouseClicked

    private void jlblFavoritosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlblFavoritosMouseReleased
        //ahora depende de la clave!
        addToFavoritos();
    }//GEN-LAST:event_jlblFavoritosMouseReleased

    private void jtxtClaroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtClaroKeyReleased
        if(cifrar){
            mostrarResultado();
        }
    }//GEN-LAST:event_jtxtClaroKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        abrirTabla(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton jbtnAcercaDe;
    private javax.swing.JButton jbtnCifrarDecifrar;
    private javax.swing.JButton jbtnCopiar;
    private javax.swing.JButton jbtnLimpiar;
    private javax.swing.JButton jbtnMostrarTabla;
    private javax.swing.JButton jbtnVerLista;
    private javax.swing.JComboBox<String> jcbxClave;
    private javax.swing.JLabel jlblAdministrarClaves;
    private javax.swing.JLabel jlblCargarCskey;
    private javax.swing.JLabel jlblCifrar;
    private javax.swing.JLabel jlblExportarTodasCskey;
    private javax.swing.JLabel jlblExportarUnaCskey;
    private javax.swing.JLabel jlblFavoritos;
    private javax.swing.JLabel jlblNombreClaveMatriz;
    private javax.swing.JLabel jlblResetClaves;
    private javax.swing.JTable jtblTabla;
    private javax.swing.JTextField jtxtClaro;
    private javax.swing.JTextArea jtxtResultado;
    private javax.swing.JTextField jtxtSeparador;
    // End of variables declaration//GEN-END:variables

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().
                getImage(ClassLoader.getSystemResource("imagenes/hexa-50.png"));

        return retValue;
    }

    private void limpiar() {
        jtxtClaro.setText(null);
        jtxtResultado.setText(null);
    }

    private void llenarJcbx() {
        cifrar = false;
        limpiarJcbx();
        for (int i = 0; i < claves.size(); i++) {
            modeloCBox.addElement(claves.get(i));
            System.out.println(claves.get(i));
        }
        cifrar = true;
    }

    private void limpiarJcbx() {
        jcbxClave.removeAllItems();
    }

    /**
     * se encarga de cifrar
     */
    private void mostrarResultado() {
        try {
            actualizarPublicClave();
            ClaveInterfaz k = _clave;
            String texto = jtxtClaro.getText().replaceAll(jtxtSeparador.getText(), "");//texto a procesar
            jtxtResultado.setText(
                    cifrar
                            ? /*mandar texto cifrado*/ k.cifrar(texto, jtxtSeparador.getText())
                            : /*mandar texto descifrado*/ k.descifrar(texto, jtxtSeparador.getText())
            );

        } catch (Exception e) {
            mostrarMensajeError("Ha ocurrido un error al momento de " + (cifrar ? "cifrar" : "descifrar"));
        }
    }

    private void mostrarPrograma() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        try {
            Thread.sleep(600);
            this.setVisible(true);
        } catch (Exception ex) {
            System.out.println("ha ocurrido un error: " + ex);
        }
    }

    public void abrirTabla(boolean b) {
        if (b) {
            actualizarPublicClave();
            llenarTabla(_clave);
        }
        setBounds(getX(), getY(), (b ? 1177 : 548), 446);
        setLocationRelativeTo(null);
        _tablaAbierta = b;
    }

    /**
     *
     * @param clave
     */
    public void llenarTabla(ClaveInterfaz clave) {
        try {
            ClaveString k = (ClaveString) clave;
            jlblNombreClaveMatriz.setText(clave.getNombre());//llenar el nombre de la matriz
            modeloTabla = k.getTableModel(false);
            jtblTabla.setModel(modeloTabla);
        } catch (Exception e) {
            mostrarMensaje("La clave seleccionada no dispone de un método para ");
        }
    }

    private void llenarTabla() {
        actualizarPublicClave();
        _clave.mostrarEstructura(this);
    }

    public void actualizarPublicClave() {
        _clave = (ClaveInterfaz) jcbxClave.getSelectedItem();
    }

    public ClaveInterfaz getSelectedClave() {
        actualizarPublicClave();
        return _clave;
    }

    public void cargarRegistro(String texto_claro, String criptograma, String clave) {
        jtxtClaro.setText(texto_claro);
        jtxtResultado.setText(criptograma);
        jcbxClave.setSelectedItem(clave);
    }

    private ArrayList<registroTO> cargarListaRegistros() {
        ArrayList<registroTO> x = (ArrayList<registroTO>) abrirObjeto(dir_regFavoritos, false);
        return (x != null ? x : new ArrayList<registroTO>());
    }

    public void mostrarMensajeFavoritos(String m) {
        JOptionPane.showMessageDialog(null, m, "", JOptionPane.INFORMATION_MESSAGE,
                new javax.swing.ImageIcon(getClass().getResource("/imagenes/me_gusta/icons8-Me gusta Filled-25.png"))
        );
    }

    public static void mostrarMensajeGuardar(String m) {
        Mensajes ms = new Mensajes();
        ms.mostrarMensaje(m, "/imagenes/icons8-Guardar-25.png");
    }

    public void mostrarMensajeGuardarTodo(String m) {
        JOptionPane.showMessageDialog(null, m, "", JOptionPane.INFORMATION_MESSAGE,
                new javax.swing.ImageIcon(getClass().getResource("/imagenes/icons8-Guardar todo-25.png"))
        );
    }

    public void mostrarMensajeError(String m) {
        JOptionPane.showMessageDialog(null, m, "", JOptionPane.INFORMATION_MESSAGE,
                new javax.swing.ImageIcon(getClass().getResource("/imagenes/icons8-Error-96.png"))
        );
    }

    public void guardarObjeto(String ruta, Object obj) {
        try {
            try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(ruta))) {
                oos.writeObject(obj);
            }
        } catch (IOException e) {
            mostrarMensaje("No se ha podido guardar.");
        }
    }

    public static void guardarObjeto(String ruta, Object obj, String mensaje) {
        try {
            try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(ruta))) {
                oos.writeObject(obj);
                oos.close();
                mostrarMensajeGuardar(mensaje);
            }
        } catch (IOException e) {
            mostrarMensaje("No se ha podido guardar.");
        }
    }

    public void guardarObjeto(String ruta, Object obj, String mensaje, int todos) {
        try {
            try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(ruta))) {
                oos.writeObject(obj);
                oos.close();
                mostrarMensajeGuardarTodo(mensaje);
            }
        } catch (IOException e) {
            mostrarMensaje("No se ha podido guardar.");
        }
    }

    /**
     *
     * @param ruta la ubicacion del archivo
     * @param b si desea que se muestre mensaje de error -> true
     * @return
     */
    public Object abrirObjeto(String ruta, boolean b) {
        Object o = null;
        try {
            try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(ruta))) {
                o = ois.readObject();
            }
        } catch (IOException | ClassNotFoundException e) {
            if (b) {
                mostrarMensaje("No se ha podido cargar. " + e);
            }
        }
        return o;
    }

    public String getRutaAbrir(FileNameExtensionFilter filtro, String m, String text) {
        JFileChooser open = new JFileChooser();
        open.setSelectedFile(new File(text));
        open.setCurrentDirectory(ultimaRutaAbierta);
        open.setFileFilter(filtro);
        open.setApproveButtonText(m);
        open.showOpenDialog(open);
        ultimaRutaAbierta = open.getCurrentDirectory();
        return open.getSelectedFile().toString();
    }

    public static String getRutaGuardar(FileNameExtensionFilter filtro, String text) {
        JFileChooser save = new JFileChooser();
        save.setSelectedFile(new File(text));
        save.setCurrentDirectory(ultimaRutaAbierta);
        save.setFileFilter(filtro);
        save.setApproveButtonText("Guardar");
        save.showSaveDialog(null);
        ultimaRutaAbierta = save.getCurrentDirectory();
        return save.getSelectedFile().toString();
    }

    private void crearCarpetaFavoritos() {
        File f = new File(dir_regFavoritos.replace("regfav_dataloader.dl", ""));
        f.mkdirs();
        f = new File(dir_regFavoritos);
        if (!f.exists()) {
            try {
                System.out.println(f.createNewFile());
            } catch (IOException ex) {
                System.out.println("error al crear archivo inicial regFavoritos " + ex);
            }
        }
    }

    public void eliminarFavorito(int i, Favoritos fav) {
        if (JOptionPane.showConfirmDialog(null, "¿Deseas eliminar este registro de tus favoritos?") == 0) {
            _regfavoritos.remove(i);
            guardarObjeto(
                    dir_regFavoritos,
                    _regfavoritos);
            fav.llenarTabla();
            mostrarMensajeFavoritos("El registro ha sido eliminado de tus favoritos");
        }
    }

    public void limpiarFavoritos(Favoritos fav) {
        if (JOptionPane.showConfirmDialog(null, "¿Deseas eliminar todos los registros de tus favoritos?") == 0) {
            while (!_regfavoritos.isEmpty()) {
                _regfavoritos.remove(0);
            }
            guardarObjeto(
                    dir_regFavoritos,
                    _regfavoritos);
            fav.llenarTabla();
            mostrarMensajeFavoritos("Ya no tienes favoritos, añade uno!");
        }
    }

    private void cambiarIconoLlaveCifrar() {
        jlblCifrar.setIcon(new javax.swing.ImageIcon(getClass().getResource((cifrar ? "/imagenes/llave/icons8-Llave-25-2.png" : "/imagenes/llave/icons8-Llave-25.png"))));
    }

    private boolean cargarClaves(ArrayList<ClaveInterfaz> claves) {
        if (claves != null) {
            ClaveInterfaz c;
            while (!claves.isEmpty()) {
                c = claves.get(0);
                this.claves.add(c);
                claves.remove(0);
            }
            llenarJcbx();
            return true;
        } else {
            System.out.println("No se han encontrado claves para cargar.");
            return false;
        }
    }

    void eliminarClave(int i, AdministrarClaves administrar) {
        if (JOptionPane.showConfirmDialog(null, "¿Deseas eliminar esta clave?") == 0) {
            claves.remove(i);
            guardarClaves();
            administrar.llenarTabla();
            llenarJcbx();
            mostrarMensajeFavoritos("La clave ha sido eliminada.");
        }
    }

    void limpiarClaves(AdministrarClaves administrar) {
        if (JOptionPane.showConfirmDialog(null, "¿Deseas eliminar todas las claves?") == 0) {
            while (!claves.isEmpty()) {
                claves.remove(0);
            }
            guardarClaves();
            administrar.llenarTabla();
            llenarJcbx();
            mostrarMensajeFavoritos("Ya no tienes claves, añade una!");
        }
    }

    void resetearClaves() {
        if (JOptionPane.showConfirmDialog(null, "¿Deseas resetear sus claves?, esto restablecerá las claves por defecto y eliminará las demás.") == 0) {
            while (!claves.isEmpty()) {
                claves.remove(0);
            }
            generarClavesPorDefecto();
            llenarJcbx();
            mostrarMensajeFavoritos("Las claves han sido restablecidas.");
        }
    }

    private void generarClavesPorDefecto() {
        claves.add(new ClaveString());
        claves.add(new ClaveString(
                new String[]{"2A", "2B", "2C", "2D", "2E", "2F", "2G", "2H", "9I"},
                new String[]{"9A", "9B", "9C", "9D", "9E", "9F", "9G", "9H", "9I", "9J"},
                new String[][]{
                    {"A", "B", "C", "D", "E", "F", "a", "k", "p", "9"},
                    {"G", "H", "I", "J", "K", "L", "b", "l", "q", "8"},
                    {"M", "N", "Ñ", "O", "P", "Q", "c", "m", "r", "7"},
                    {"R", "S", "T", "U", "V", " ", "d", "n", "s", "6"},
                    {"X", "Y", "Z", "Á", "É", "Í", "e", "ñ", "t", "5"},
                    {"Ó", "Ú", "f", "g", "h", "i", "j", "o", "u", "4"},
                    {"v", "w", "x", "y", "z", "á", "í", "ú", "é", "3"},
                    {"ó", ",", ";", "*", "/", ":", "?", "¿", "'", "2"},
                    {"¡", "!", "|", "%", "&", "°", "¬", "$", "0", "1"}},
                "Polybius Extendido",
                "XX",
                "#"
        ));
        claves.add(new ClaveString(
                new String[]{"01", "02"},
                new String[]{"00", "01", "10", "11", "21"},
                new String[][]{
                    {"0", "1", "2", "3", "4"},
                    {"5", "6", "7", "8", "9"}},
                "Polybius Numérico",
                "xx",
                "#"
        ));
        claves.add(new ClaveString(
                new String[]{"0000", "0001", "0011", "0100", "0110", "0111", "0010", "1010", "1111"},
                new String[]{"1111", "1000", "1100", "1110", "1010", "1001", "1101", "0000", "0111", "0101"},
                new String[][]{
                    {"A", "B", "C", "D", "E", "F", "a", "k", "p", "9"},
                    {"G", "H", "I", "J", "K", "L", "b", "l", "q", "8"},
                    {"M", "N", "Ñ", "O", "P", "Q", "c", "m", "r", "7"},
                    {"R", "S", "T", "U", "V", " ", "d", "n", "s", "6"},
                    {"X", "Y", "Z", "Á", "É", "Í", "e", "ñ", "t", "5"},
                    {"Ó", "Ú", "f", "g", "h", "i", "j", "o", "u", "4"},
                    {"v", "w", "x", "y", "z", "á", "í", "ú", "é", "3"},
                    {"ó", ",", ";", "*", "/", ":", "?", "¿", "'", "2"},
                    {"¡", "!", "|", "%", "&", "°", "¬", "$", "0", "1"}},
                "Polybius Binario",
                "XXXX",
                "#"
        ));
        claves.add(new ClaveString(
                new String[]{"221", "365", "616", "252", "765", "172", "376", "703", "605"},
                new String[]{"704", "604", "360", "615", "760", "170", "340", "220", "110", "222"},
                new String[][]{
                    {"A", "B", "C", "D", "E", "F", "a", "k", "p", "9"},
                    {"G", "H", "I", "J", "K", "L", "b", "l", "q", "8"},
                    {"M", "N", "Ñ", "O", "P", "Q", "c", "m", "r", "7"},
                    {"R", "S", "T", "U", "V", " ", "d", "n", "s", "6"},
                    {"X", "Y", "Z", "Á", "É", "Í", "e", "ñ", "t", "5"},
                    {"Ó", "Ú", "f", "g", "h", "i", "j", "o", "u", "4"},
                    {"v", "w", "x", "y", "z", "á", "í", "ú", "é", "3"},
                    {"ó", ",", ";", "*", "/", ":", "?", "¿", "'", "2"},
                    {"¡", "!", "|", "%", "&", "°", "¬", "$", "0", "1"}},
                "Polybius Octal",
                "XXX",
                "#"
        ));
        claves.add(new ClaveString(
                new String[]{"F2A", "11B", "E2C", "82D", "2E1", "1E5", "25F", "2AA", "29E"},
                new String[]{"21A", "19B", "29C", "9D3", "5E5", "92F", "34A", "78C", "97A", "99D"},
                new String[][]{
                    {"A", "B", "C", "D", "E", "F", "a", "k", "p", "9"},
                    {"G", "H", "I", "J", "K", "L", "b", "l", "q", "8"},
                    {"M", "N", "Ñ", "O", "P", "Q", "c", "m", "r", "7"},
                    {"R", "S", "T", "U", "V", " ", "d", "n", "s", "6"},
                    {"X", "Y", "Z", "Á", "É", "Í", "e", "ñ", "t", "5"},
                    {"Ó", "Ú", "f", "g", "h", "i", "j", "o", "u", "4"},
                    {"v", "w", "x", "y", "z", "á", "í", "ú", "é", "3"},
                    {"ó", ",", ";", "*", "/", ":", "?", "¿", "'", "2"},
                    {"¡", "!", "|", "%", "&", "°", "¬", "$", "0", "1"}},
                "Polybius Hexadecimal",
                "XXX",
                "#"
        ));
        claves.add(new ClaveString(
                new String[]{"@字‡", "漢—™", "‰Ÿ#", "Ø«ß", "∫ſƒ", "ÐÆÇ", "¢±£", "€‰Ÿ", "{~}"},
                new String[]{"†€‰", "@#&", "Ÿœƒ", "ßÞØ", "Ð×Ç", "»Æ¼", "®«ª", "§¥µ", "³±£", "¦¢¤"},
                new String[][]{
                    {"A", "B", "C", "D", "E", "F", "a", "k", "p", "9"},
                    {"G", "H", "I", "J", "K", "L", "b", "l", "q", "8"},
                    {"M", "N", "Ñ", "O", "P", "Q", "c", "m", "r", "7"},
                    {"R", "S", "T", "U", "V", " ", "d", "n", "s", "6"},
                    {"X", "Y", "Z", "Á", "É", "Í", "e", "ñ", "t", "5"},
                    {"Ó", "Ú", "f", "g", "h", "i", "j", "o", "u", "4"},
                    {"v", "w", "x", "y", "z", "á", "í", "ú", "é", "3"},
                    {"ó", ",", ";", "*", "/", ":", "?", "¿", "'", "2"},
                    {"¡", "!", "|", "%", "&", "°", "¬", "$", "0", "1"}},
                "Polybius ASCII",
                "XXX",
                "#", false
        ));
        guardarClaves();

    }

    /**
     * guarda las claves como arraylist<claveObject> en un archivo recuperable,
     * crea las carpetas en caso no existan.
     */
    public void guardarClaves() {
        File f = new File(dir_regFavoritos.replace("cskeys_dataloader.dl", ""));
        f.mkdirs();
        f = new File(dir_regFavoritos);
        if (!f.exists()) {
            try {
                System.out.println(f.createNewFile());
            } catch (IOException ex) {
                System.out.println("error al crear archivo inicial cskeys " + ex);
            }
        }
        guardarObjeto(dir_claves, claves);
    }

    /**
     * limpia el arraylist de ClaveString's (claves)
     */
    public void limpiarClaves() {
        while (!claves.isEmpty()) {
            claves.remove(0);
        }

    }

    /**
     * este metodo cargará las claves almacenadas por el programa en su carpeta
     * oficial
     */
    private void cargarClaves() {
        try {
            ArrayList<ClaveInterfaz> obj = (ArrayList<ClaveInterfaz>) abrirObjeto(dir_claves, false);
            limpiarClaves();
            if (!cargarClaves(obj) && !(new File(dir_claves).exists())) {
                generarClavesPorDefecto();
            }
        } catch (Exception e) {
            generarClavesPorDefecto();
        }
    }

    /*
    métodos estáticos, pertenecientes a la clase GUI
     */
    public static void mostrarMensaje(String m) {
        JOptionPane.showMessageDialog(null, m);
    }

    public static void copiar(String texto) {
        copiar(texto, null);
    }

    public static void copiar(String texto, String m) {
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        StringSelection data = new StringSelection(texto);
        clipboard.setContents(data, data);
        if (m != null) {
            mostrarMensaje(m);
        }
    }

    /**
     *
     * @return regresa la fecha actual de la computadora en formato dd/MM/YYYY
     */
    public static String getFechaActual() {
        Date fecha = new Date();
        SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/YYYY hh:mm:ss");
        return formatoFecha.format(fecha);

    }

    private void addToFavoritos() {
        String claro = jtxtClaro.getText();
        String r = jtxtResultado.getText();
        if (claro != null && !claro.equals("")) {
            _regfavoritos.add(
                    new registroTO(
                            (cifrar ? claro : r),
                            (cifrar ? r : claro),
                            jcbxClave.getSelectedItem().toString(),
                            getFechaActual())
            );
            ActualizarArchivoFavoritos();
            mostrarMensajeFavoritos("Añadido a favoritos");
        } else {
            mostrarMensajeError("No se ha encontrado texto para agregar, ingresa texto en claro.");
            jtxtClaro.grabFocus();
        }
    }

    private void botonCifrar_Descifrar() {
        cifrar = !cifrar;
        cambiarIconoLlaveCifrar();
        jbtnCifrarDecifrar.setText(cifrar ? "DESCIFRAR" : "CIFRAR");
        jLabel2.setText(cifrar ? "Ingresar Texto en Claro:" : "Ingresar Criptograma:");
        jtxtClaro.setText(null);
        String c = jtxtResultado.getText();
        jtxtResultado.setText(null);
        if (!c.isEmpty()) {
            copiar(c.replace(jtxtSeparador.getText(), ""), "Se ha copiado el resultado al portapapeles.");
        }
        //llenarTxtArea();
        jtxtClaro.grabFocus();
    }

    private void ActualizarArchivoFavoritos() {
        guardarObjeto(
                dir_regFavoritos,
                _regfavoritos);
    }

}
